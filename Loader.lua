


-- Roblox Lua KRNL Loader Script (‡∏£‡∏ß‡∏°‡πÇ‡∏Ñ‡πâ‡∏î 2 ‡∏ä‡∏∏‡∏î)

-- === ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ã‡πâ‡∏≥ ===

if not _G.efield_loader then
    task.wait(5)
    game.Players.LocalPlayer:Kick("This is a fucking old script pls get new from Dev!!!!. End of storyü•∞üòò \n in 4sec game gonnabe shutdown!")
    wait(4)
    game:Shutdown()
    return
end


-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡∏£‡∏±‡∏ô
    task.wait(2)

loadstring(game:HttpGet("https://raw.githubusercontent.com/Efield44444235364/Ban/refs/heads/main/Warning.lua"))()

local MarketplaceService = game:GetService("MarketplaceService")
local placeId = game.PlaceId

-- === 1. ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î Place ID ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏Ñ‡πâ‡∏î‡∏ä‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏© (‡∏ä‡∏∏‡∏î‡∏ö‡∏ô) ===
local ALLOWED_PLACE_IDS = {
    131716211654599, -- ID 1
    168556275      -- ID 2
}

local isCorrectPlace = false
for _, id in ipairs(ALLOWED_PLACE_IDS) do
    if placeId == id then
        isCorrectPlace = true
        break
    end
end

local placeName = MarketplaceService:GetProductInfo(placeId).Name
print("üåç PlaceID : " .. placeId .. " | Map : " .. placeName)


-- ====================================================================
-- === ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏•‡∏∞ Modules ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô) ===
-- ====================================================================

local Modules = {
    -- ‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏Ñ‡∏±‡∏î‡∏™‡∏£‡∏£‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏ô‡πâ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û
    Colors =  {
        ["Success"]   = "46, 204, 113",   -- Emerald Green (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Success/Loaded)
        ["NEON_GREEN"]= "57, 255, 20",    -- NEON Green (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Final Success Message)
        ["Accent"]    = "52, 152, 219",   -- Bright Blue (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Loading Bar)
        ["Primary"]   = "236, 240, 241",  -- Light Gray (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô)
        ["Error"]     = "231, 76, 60",    -- Alizarin Red (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Failure)
        ["Warning"]   = "241, 196, 15",   -- Sun Flower Yellow (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏´‡∏•‡∏î >= 10s)
    },
    Services = {
        RunService = game:GetService("RunService"),
        CoreGui = game:GetService("CoreGui")
    },
    HeartbeatConnection = nil 
}

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ DevConsole ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö RichText
Modules.ChangeColor = function() 
    Modules.HeartbeatConnection = Modules.Services.RunService.Heartbeat:Connect(function()
        local success, err = pcall(function()
            local devConsole = Modules.Services.CoreGui:FindFirstChild("DevConsoleMaster")
            if devConsole then
                for _, label in pairs(devConsole:GetDescendants()) do 
                    if label:IsA("TextLabel") then 
                        label.RichText = true 
                    end 
                end 
            end
        end)

        if not success then 
            warn(`[Console Init] Error: {err}. Disconnecting RichText loop.`)
            if Modules.HeartbeatConnection then
                Modules.HeartbeatConnection:Disconnect()
                Modules.HeartbeatConnection = nil
            end
        end 
    end)
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô RichText ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
Modules.FinalizeLoading = function(watermark, loadingLabel)
    local finalID = tostring(math.random(10, 999)) 
    
    if loadingLabel and loadingLabel:IsA("TextLabel") then
        loadingLabel.Text = string.format(
            "<font color='rgb(%s)' size='18'>[%s] ID:%s | [SUCCESS]</font>", 
            Modules.Colors["NEON_GREEN"], 
            watermark, 
            finalID
        )
    end

    if Modules.HeartbeatConnection then
        Modules.HeartbeatConnection:Disconnect()
        Modules.HeartbeatConnection = nil
    end
end

-- ====================================================================
-- === ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î FILES_TO_LOAD ‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç PlaceId ===
-- ====================================================================

local FILES_TO_LOAD = {}
local loadingBarFunction = nil -- ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ Loading Bar Function

if isCorrectPlace then
    
    -- ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà 1: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Place ID ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á
    FILES_TO_LOAD = {
        -- Bypass (‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏´‡∏•‡∏î 5-16 ‡∏ß‡∏¥)
        {
            Name = "Bypass", 
            URL = "", -- ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°
            CustomWait = math.random(50, 160) / 10 -- 5.0s ‡∏ñ‡∏∂‡∏á 16.0s
        },
        -- Memory cleaning (‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏Å‡∏ï‡∏¥)
        {
            Name = "Memory cleaning", 
            URL = "https://raw.githubusercontent.com/Efield44444235364/Ban/refs/heads/main/RamClear%20Auto.lua",
            CustomWait = 0.4 -- ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏õ‡∏Å‡∏ï‡∏¥
        },
    }

    -- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô LoadingBar ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà 1 (‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤)
    loadingBarFunction = function(watermark, loadingSymbol)
        loadingSymbol = loadingSymbol or "‚ñà"
        
        local totalFiles = #FILES_TO_LOAD
        
        local uniqueID = tostring(math.random(10, 999))
        local uniqueText = string.format("[%s] ID:%s | i think script load successfully \nif you see this with white text!!", watermark, uniqueID)
        print(uniqueText) 
    
        local loadingLabel = nil
        repeat task.wait()
            local devConsole = Modules.Services.CoreGui:FindFirstChild("DevConsoleMaster")
            if devConsole then
                for _, label in pairs(devConsole:GetDescendants()) do 
                     if label:IsA("TextLabel") and string.find(label.Text, uniqueID) then 
                        loadingLabel = label 
                        break
                    end 
                end 
            end
        until loadingLabel
    
        if not loadingLabel then 
            warn("Failed to find initial DevConsole TextLabel. Stopping loading bar.")
            return 
        end
        
        local accentColor = Modules.Colors["Accent"]
        local whiteColor = Modules.Colors["Primary"]
        local errorColor = Modules.Colors["Error"]
        local warningColor = Modules.Colors["Warning"]

        local loadingBarTemplate = [[<font color='rgb(%s)' size='15'>[%s] <font color='rgb(%s)'>[</font>%s<font color='rgb(%s)'>%s</font><font color='rgb(%s)'>]</font> %d%% | %s</font>]]
        local finalTemplate = [[<font color='rgb(%s)' size='15'>[%s] <font color='rgb(%s)'>[</font>%s<font color='rgb(%s)'>%s</font><font color='rgb(%s)'>]</font> %d%% | Status: %s | Time: %s</font>]]
        
        
        -- ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß
        for i, fileData in ipairs(FILES_TO_LOAD) do
            local currentFileName = fileData.Name
            local loadTime = fileData.CustomWait or 0.1
    
            -- Animation ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå (Pre-Load)
            for j = 1, 5 do
                local currentProgress = (i - 1) / totalFiles + (j / 5) * (1 / totalFiles)
                local percent = math.floor(currentProgress * 100)
                local barLength = math.floor(currentProgress * 30)
                
                local bar = string.rep(loadingSymbol, barLength)
                local empty = string.rep(" ", 30 - barLength)
    
                loadingLabel.Text = string.format(
                    loadingBarTemplate, 
                    whiteColor, watermark, accentColor, bar, whiteColor, empty, accentColor, percent,
                    "Loading: " .. currentFileName
                )
                task.wait(0.05)
            end
            
            -- ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏£‡∏¥‡∏á (Blocking Call)
            local startTime = tick()
            local success = pcall(function()
                task.wait(loadTime) -- ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
                if fileData.URL and fileData.URL ~= "" then
                    loadstring(game:HttpGet(fileData.URL))()
                end
            end)
            local endTime = tick()
            local timeElapsed = math.floor((endTime - startTime) * 100) / 100 
            
            -- ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏´‡∏•‡∏î
            local timeColor = whiteColor
            if timeElapsed >= 10 and timeElapsed < 20 then 
                timeColor = warningColor 
            elseif timeElapsed >= 20 then
                timeColor = errorColor 
            end
            
            -- ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Loading Bar ‡πÉ‡∏´‡πâ‡πÄ‡∏ï‡πá‡∏° Step ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            local statusText = success and "<font color='rgb("..Modules.Colors["Success"]..")'>Complete</font>" or "<font color='rgb("..errorColor..")'>Failed</font>"
            local percent = math.floor((i / totalFiles) * 100)
            local barLength = math.floor((i / totalFiles) * 30)
            
            local bar = string.rep(loadingSymbol, barLength)
            local empty = string.rep(" ", 30 - barLength)
            local timeDisplay = string.format("<font color='rgb(%s)'>%.2fs</font>", timeColor, timeElapsed)
    
            loadingLabel.Text = string.format(
                finalTemplate, 
                whiteColor, watermark, accentColor, bar, whiteColor, empty, accentColor, percent,
                statusText, timeDisplay
            )
            task.wait(0.1)
        end
    
        Modules.FinalizeLoading(watermark, loadingLabel)

    end -- ‡∏õ‡∏¥‡∏î LoadingBar ‡∏ä‡∏∏‡∏î 1

else

    -- ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà 2: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Place ID ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á
    FILES_TO_LOAD = {
        {Name = "Blox Fruits", URL = "https://raw.githubusercontent.com/Efield44444235364/Ban/refs/heads/main/BF.lua"},
        {Name = "Optimization Engine", URL = "https://raw.githubusercontent.com/Efield44444235364/Ban/refs/heads/main/blox%20fruit%20Optimize.lua"},
        {Name = "Memory optimize", URL = "https://raw.githubusercontent.com/Efield44444235364/Ban/refs/heads/main/RamClear%20Auto.lua"},
        {Name = "Anti-Admin", URL = "https://raw.githubusercontent.com/Efield44444235364/Ban/refs/heads/main/Admins.lua"},
        {Name = "Auto Reconnect", URL = "https://raw.githubusercontent.com/Efield44444235364/Ban/refs/heads/main/Auto%20reconnect.lua"},
        {Name = "User Interface (UI)", URL = "https://raw.githubusercontent.com/Efield44444235364/Ban/refs/heads/main/Ui2.lua"},
    }

    -- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô LoadingBar ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà 2 (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤)
    loadingBarFunction = function(watermark, loadingSymbol)
        loadingSymbol = loadingSymbol or "‚ñà"
        
        local totalFiles = #FILES_TO_LOAD
        
        local uniqueID = tostring(math.random(10, 999))
        local uniqueText = string.format("[%s] ID:%s | i think script load successfully.... ", watermark, uniqueID)
        print(uniqueText) 
    
        local loadingLabel = nil
        repeat task.wait()
            local devConsole = Modules.Services.CoreGui:FindFirstChild("DevConsoleMaster")
            if devConsole then
                for _, label in pairs(devConsole:GetDescendants()) do 
                     if label:IsA("TextLabel") and string.find(label.Text, uniqueID) then 
                        loadingLabel = label 
                        break
                    end 
                end 
            end
        until loadingLabel
    
        if not loadingLabel then 
            warn("Failed to find initial DevConsole TextLabel. Stopping loading bar.")
            return 
        end
        
        local accentColor = Modules.Colors["Accent"]
        local whiteColor = Modules.Colors["Primary"]
        local errorColor = Modules.Colors["Error"]

        local loadingBarTemplate = [[<font color='rgb(%s)' size='15'>[%s] <font color='rgb(%s)'>[</font>%s<font color='rgb(%s)'>%s</font><font color='rgb(%s)'>]</font> %d%% | %s</font>]]
        local finalTemplate = [[<font color='rgb(%s)' size='15'>[%s] <font color='rgb(%s)'>[</font>%s<font color='rgb(%s)'>%s</font><font color='rgb(%s)'>]</font> %d%% | Status: %s</font>]]
        
        
        -- ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß
        for i, fileData in ipairs(FILES_TO_LOAD) do
            local currentFileName = fileData.Name
            
            -- Animation ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå (Pre-Load)
            for j = 1, 5 do
                local currentProgress = (i - 1) / totalFiles + (j / 5) * (1 / totalFiles)
                local percent = math.floor(currentProgress * 100)
                local barLength = math.floor(currentProgress * 30)
                
                local bar = string.rep(loadingSymbol, barLength)
                local empty = string.rep(" ", 30 - barLength)
    
                loadingLabel.Text = string.format(
                    loadingBarTemplate, 
                    whiteColor, watermark, accentColor, bar, whiteColor, empty, accentColor, percent,
                    "Loading: " .. currentFileName
                )
                task.wait(0.05)
            end
            
            -- ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏£‡∏¥‡∏á (Blocking Call)
            local success = pcall(function()
                task.wait(0.1) -- ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î
                return loadstring(game:HttpGet(fileData.URL))()
            end)
            
            -- ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Loading Bar ‡πÉ‡∏´‡πâ‡πÄ‡∏ï‡πá‡∏° Step ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            local statusText = success and "<font color='rgb("..Modules.Colors["Success"]..")'>Complete</font>" or "<font color='rgb("..errorColor..")'>Failed</font>"
            local percent = math.floor((i / totalFiles) * 100)
            local barLength = math.floor((i / totalFiles) * 30)
            
            local bar = string.rep(loadingSymbol, barLength)
            local empty = string.rep(" ", 30 - barLength)
    
            loadingLabel.Text = string.format(
                finalTemplate, 
                whiteColor, watermark, accentColor, bar, whiteColor, empty, accentColor, percent,
                statusText
            )
            task.wait(0.1)
        end
    
        Modules.FinalizeLoading(watermark, loadingLabel)

    end -- ‡∏õ‡∏¥‡∏î LoadingBar ‡∏ä‡∏∏‡∏î 2
end

-- ====================================================================
-- === ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á ===
-- ====================================================================

Modules.ChangeColor()

if loadingBarFunction then
    loadingBarFunction("KAWNEW_LOAD", "‚ñà")
end


-- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå
